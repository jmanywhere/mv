// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Raise {
  id            String           @id @default(cuid())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  contract      String
  tokenRaised   String // Token Name of Raise
  raised        BigInt
  goal          BigInt
  showcase      Boolean
  ownerId       String
  description   String
  logo_icon     String
  banner        String
  name          String
  chainId       Int
  flexibleStart Boolean
  startTime     DateTime
  referrerId    String? // wallet Address
  userId        String?
  acceptTerms   String // wallet needs to sign message to accept terms
  pledges       Int // Number of people that pledged
  type          RaiseType
  chain         Chain            @relation(fields: [chainId], references: [id])
  owner         User             @relation("owner", fields: [ownerId], references: [id])
  referrer      User?            @relation("referrer", fields: [referrerId], references: [id])
  User          User?            @relation(fields: [userId], references: [id])
  upsells       Upsell[]
  features      Feature[]
  writeups      Writeup[]
  socials       SocialsOnFunds[]
  TagsOnRaise   TagsOnRaise[]
  reports       Report[]
}

model Feature {
  id       String @id @default(cuid())
  duration BigInt
  raise    Raise  @relation(fields: [raiseId], references: [id])
  raiseId  String
}

model Writeup {
  id       String @id @default(cuid())
  raise    Raise  @relation(fields: [raiseId], references: [id])
  user     User   @relation(fields: [authorId], references: [id])
  raiseId  String // uuid
  text     String
  authorId String // wallet Address
}

model User {
  id          String    @id @unique // wallet, not autogenerated
  alias       String?   @unique
  writer      Boolean
  dev         Boolean
  auditor     Boolean
  referrer    Boolean
  other       Boolean
  contact     String
  contact2    String?
  otherDetail String
  Writeup     Writeup[]
  raises      Raise[]   @relation("owner")
  referred    Raise[]   @relation("referrer")
  Raise       Raise[]
  Upsells     Upsell[]
}

// Necessary Model to fulfill the Many-Many relations
model SocialsOnFunds {
  raise    Raise   @relation(fields: [raiseId], references: [id])
  social   Social  @relation(fields: [socialId], references: [id])
  verified Boolean
  raiseId  String
  socialId Int
  removed  Boolean @default(false)

  @@id([raiseId, socialId])
}

// TODO we should get a form of validation for socials. In the meantime this is going to have to be a manual process
model Social {
  id    Int              @id @unique @default(autoincrement())
  type  String
  url   String           @unique
  funds SocialsOnFunds[]
}

model Chain {
  id    Int      @id @unique // This is ChainId
  name  String
  rpcs  String[] // Free(if not well keep costs in mind) RPC URLs
  Raise Raise[]
}

model PaymentToken {
  id       String  @id @unique // This is ChainId
  name     String
  symbol   String
  decimals Int
  logo     String? // optional since we'll be pulling from other sources... COINGECKO MAYBE?
}

model Tag {
  id          Int           @id @unique @default(autoincrement())
  name        String        @unique
  TagsOnRaise TagsOnRaise[]
}

model TagsOnRaise {
  raise   Raise  @relation(fields: [raiseId], references: [id])
  tag     Tag    @relation(fields: [tagId], references: [id])
  raiseId String
  tagId   Int

  @@id([raiseId, tagId])
}

model Report {
  id       String @id @default(cuid())
  raise    Raise  @relation(fields: [raiseId], references: [id])
  raiseId  String // uuid
  text     String
  reporter String // wallet Address
}

enum SocialTypes {
  TWITTER
  FB
  DISCORD
  TELEGRAM
  MEDIUM
  REDDIT
}

enum RaiseType {
  FUNDRAISE
  CROWDSALE
  CHARITY
}

enum UpsellType {
  WHITELABEL
  DEV
  AUDIT
  MARKETING
  OTHER
}

model Upsell {
  id         String     @id @default(cuid())
  raise      Raise      @relation(fields: [raiseId], references: [id])
  raiseId    String // uuid
  name       String
  executorId String // wallet Address
  executor   User       @relation(fields: [executorId], references: [id])
  amount     BigInt
  type       UpsellType
  otherType  String?
  token      String // Token Name
}
